% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/preprocess_cds.R
\name{preprocess_cds}
\alias{preprocess_cds}
\title{Preprocess a cds to prepare for trajectory inference}
\usage{
preprocess_cds(
  cds,
  method = c("PCA", "LSI"),
  num_dim = 50,
  norm_method = c("log", "size_only", "none"),
  use_genes = NULL,
  pseudo_count = NULL,
  scaling = TRUE,
  verbose = FALSE,
  build_nn_index = FALSE,
  nn_control = list(),
  pca_control = list()
)
}
\arguments{
\item{cds}{the cell_data_set upon which to perform this operation}

\item{method}{a string specifying the initial dimension method to use,
currently either "PCA" or "LSI". For "LSI" (latent semantic indexing), it
converts the (sparse) expression matrix into a tf-idf matrix and then
performs SVD to decompose the gene expression / cells into certain
modules / topics. Default is "PCA".}

\item{num_dim}{the dimensionality of the reduced space.}

\item{norm_method}{Determines how to transform expression values prior to
reducing dimensionality. Options are "log", "size_only", and "none".
Default is "log". Users should only use "none" if they are confident that
their data is already normalized.}

\item{use_genes}{NULL or a list of gene IDs. If a list of gene IDs, only
this subset of genes is used for dimensionality reduction. Default is
NULL.}

\item{pseudo_count}{NULL or the amount to increase expression values before
normalization and dimensionality reduction. If NULL (default), a
pseudo_count of 1 is added for log normalization and 0 is added for size
factor only normalization.}

\item{scaling}{When this argument is set to TRUE (default), it will scale
each gene before running trajectory reconstruction. Relevant for
method = PCA only.}

\item{verbose}{Whether to emit verbose output during dimensionality
reduction}

\item{build_nn_index}{logical When this argument is set to TRUE,
preprocess_cds builds and stores the nearest neighbor index from the
reduced dimension matrix for later use. Default is FALSE.}

\item{nn_control}{An optional list of parameters used to make the nearest
neighbor index. See the set_nn_control help for detailed information.}

\item{pca_control}{An optional list of parameters that control the
storage of intermediate matrices that are required for cds
preprocessing. By default, matrices are stored in memory as dgCMatrix
class (compressed sparse matrix) objects, which can be set explicitly
using the matrix_class="dgCMatrix" list value. A very large matrix can
be stored in a file and accessed by Monocle3 as if it were in memory.
For this, Monocle3 uses the BPCells R package. Here the pca_control
list values are set to matrix_class="BPCells" and matrix_mode="dir".
Then the count matrix is stored in a directory, on-disk, that's created
by Monocle3 in the directory where you run Monocle3. This directory has
a name with the form "monocle.bpcells.*.tmp" where the asterisk is a
random string that makes the name unique. Do not remove this directory
while Monocle3 is running! Monocle3 tries to remove the BPCells matrix
directory when the preprocess_cds function finishes running; however,
sometimes a matrix directory may persist after preprocess_cds finishes.
In this case, the user must remove the directory after the session
ends. For additional information about the pca_control list, see the
set_pca_control help.}
}
\value{
an updated cell_data_set object
}
\description{
Most analyses (including trajectory inference, and clustering)
in Monocle3, require various normalization and preprocessing steps.
\code{preprocess_cds} executes and stores these preprocessing steps.

Specifically, depending on the options selected, \code{preprocess_cds} first
normalizes the data by log and size factor to address depth differences, or
by size factor only. Next, \code{preprocess_cds} calculates a lower
dimensional space that will be used as the input for further dimensionality
reduction like tSNE and UMAP.
}
\examples{
  \donttest{
    cell_metadata <- readRDS(system.file('extdata',
                                         'worm_embryo/worm_embryo_coldata.rds',
                                         package='monocle3'))
    gene_metadata <- readRDS(system.file('extdata',
                                         'worm_embryo/worm_embryo_rowdata.rds',
                                         package='monocle3'))
    expression_matrix <- readRDS(system.file('extdata',
                                             'worm_embryo/worm_embryo_expression_matrix.rds',
                                             package='monocle3'))
    cds <- new_cell_data_set(expression_data=expression_matrix,
                             cell_metadata=cell_metadata,
                             gene_metadata=gene_metadata)
    cds <- preprocess_cds(cds)

    # For typical count matrices with a small to large number of cells,
    # we suggest that you use the default pca_control list by not
    # not setting the pca_control parameter. In this case, the
    # intermediate matrices are stored in memory as sparse matrices
    # in the dgCMatrix format, as they have in the past. It is also
    # possible to set the pca_control list explicitly to use this
    # in-memory dgCMatrix format by setting the pca_control parameter
    # list to
    #
      preprocess_cds(..., pca_control=list(matrix_class='dgCMatrix'))
    #
    # For larger count matrices, we suggest that you try storing the
    # intermediate matrices as on-disk BPCells class objects by setting
    # the pca_control parameter list as follows
    #
      preprocess_cds(..., pca_control=list(matrix_class='BPCells', matrix_mode='dir'))
    #
  }

}
